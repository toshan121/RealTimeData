version: '3.8'

services:
  market-data-system:
    build: .
    container_name: market-data-tui
    network_mode: host
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock  # For Docker-in-Docker
      - ./data:/app/data
      - ./logs:/app/logs
    environment:
      - PYTHONPATH=/app
      - PYTHONUNBUFFERED=1
      - IQFEED_HOST=192.168.0.48  # Host IP for IQFeed access
    healthcheck:
      test: ["CMD", "python", "monitor.py", "test"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped

  # Infrastructure services (matching existing setup)
  redis:
    image: redis:7-alpine
    container_name: market-redis
    network_mode: host
    command: redis-server --appendonly yes --port 6380
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "-p", "6380", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  clickhouse:
    image: clickhouse/clickhouse-server:23.8
    container_name: market-clickhouse
    network_mode: host
    environment:
      CLICKHOUSE_DB: l2_market_data
      CLICKHOUSE_USER: l2_user
      CLICKHOUSE_PASSWORD: l2_secure_pass
    volumes:
      - clickhouse_data:/var/lib/clickhouse
      - ./infrastructure/clickhouse/init/01_create_market_data_schema.sql:/docker-entrypoint-initdb.d/01_create_market_data_schema.sql
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8123/ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: market-kafka
    network_mode: host
    environment:
      KAFKA_ZOOKEEPER_CONNECT: localhost:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 10s
      timeout: 5s
      retries: 3

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: market-zookeeper
    network_mode: host
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  # IQFeed service for market data
  # NOTE: IQFeed runs separately via iqfeed-docker/docker-compose.yml
  # to avoid conflicts and allow independent management
  # iqfeed:
  #   image: jaikumarm/iqfeed:v62025-w10
  #   container_name: market-iqfeed
  #   ports:
  #     - "5009:5009"   # Admin port
  #     - "9100:9100"   # Level 1 port
  #     - "9200:9200"   # Level 2 / Lookup port
  #     - "9300:9300"   # History port
  #     - "9400:9400"   # News port
  #   environment:
  #     IQFEED_PRODUCT_ID: "${DTN_PRODUCT_ID:-IQFEED_DIAGNOSTICS}"
  #     IQFEED_LOGIN: "${IQFEED_USER}"
  #     IQFEED_PASSWORD: "${IQFEED_PASS}"
  #     DISPLAY: ":1"
  #     TZ: "America/New_York"
  #   volumes:
  #     - ./iqfeed-docker/logs/iqfeed:/root/DTN/IQFeed
  #     - ./iqfeed-docker/data/iqfeed:/root/.wine/drive_c/users/root/Application Data/DTN/IQFeed
  #   healthcheck:
  #     test: ["CMD", "python3", "/root/is_iqfeed_running.py"]
  #     interval: 60s
  #     timeout: 30s
  #     retries: 3
  #     start_period: 5m
  #   restart: unless-stopped
  #   shm_size: '2gb'
  #   security_opt:
  #     - seccomp:unconfined

volumes:
  redis_data:
  clickhouse_data: