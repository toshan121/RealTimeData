name: Market Data System CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6380:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 3
      
      clickhouse:
        image: clickhouse/clickhouse-server:23.8
        ports:
          - 8123:8123
          - 9000:9000
        env:
          CLICKHOUSE_DB: l2_market_data
          CLICKHOUSE_USER: l2_user
          CLICKHOUSE_PASSWORD: l2_secure_pass
        options: >-
          --health-cmd "curl -f http://localhost:8123/ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      zookeeper:
        image: confluentinc/cp-zookeeper:7.4.0
        ports:
          - 2181:2181
        env:
          ZOOKEEPER_CLIENT_PORT: 2181
          ZOOKEEPER_TICK_TIME: 2000
      
      kafka:
        image: confluentinc/cp-kafka:7.4.0
        ports:
          - 9092:9092
        env:
          KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
          KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
          KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
          KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,PLAINTEXT_HOST://0.0.0.0:9092
          KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
          KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
          KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
        options: >-
          --health-cmd "kafka-topics --bootstrap-server localhost:9092 --list"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements-minimal.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-minimal.txt
    
    - name: Wait for services to be ready
      run: |
        echo "Waiting for services to be ready..."
        sleep 30
        
        # Test Redis
        python -c "import redis; r=redis.Redis(port=6380); print('Redis:', r.ping())"
        
        # Test ClickHouse
        python -c "import clickhouse_connect; ch=clickhouse_connect.get_client(port=8123); print('ClickHouse:', ch.query('SELECT 1').result_rows)"
    
    - name: Run optimized test suite
      run: |
        python run_final_tests.py
    
    - name: Generate coverage report
      run: |
        pip install coverage
        coverage run --source=. test_fixed.py
        coverage run -a --source=. test_system_integration.py
        coverage run -a --source=. -m pytest tests/test_critical_validation.py
        coverage report -m
        coverage html
    
    - name: Upload coverage to artifact
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: htmlcov/

  docker:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      run: |
        docker build -t market-data-system:${{ github.sha }} .
    
    - name: Test Docker image
      run: |
        # Test that image builds and runs
        docker run --rm -d --name test-container -p 8080:8080 market-data-system:${{ github.sha }} &
        sleep 30
        
        # Test container health
        docker exec test-container python monitor.py test || echo "Services not all up (expected in CI)"
        
        # Cleanup
        docker stop test-container || true
    
    - name: Validate docker-compose
      run: |
        docker-compose config

  security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run security scan with Bandit
      run: |
        pip install bandit
        bandit -r . -f json -o bandit-report.json || true
    
    - name: Check for secrets
      run: |
        # Simple check for common secret patterns
        ! grep -r "password.*=" . --include="*.py" | grep -v test | grep -v example
        ! grep -r "api_key.*=" . --include="*.py" | grep -v test | grep -v example
        echo "âœ… No hardcoded secrets found"

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install linting tools
      run: |
        pip install flake8 black isort
    
    - name: Run flake8
      run: |
        flake8 monitor.py --max-line-length=88 --ignore=E203,W503
    
    - name: Check code formatting with black
      run: |
        black --check monitor.py test_monitor.py
    
    - name: Check import sorting
      run: |
        isort --check-only monitor.py test_monitor.py